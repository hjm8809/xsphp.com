/*
MySQL Backup
Source Server Version: 5.5.20
Source Database: blog
Date: 2015-1-9 10:51:58
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
--  Table structure for `hd_attr`
-- ----------------------------
DROP TABLE IF EXISTS `hd_attr`;
CREATE TABLE `hd_attr` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` char(10) NOT NULL DEFAULT '',
  `color` char(10) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Table structure for `hd_blog`
-- ----------------------------
DROP TABLE IF EXISTS `hd_blog`;
CREATE TABLE `hd_blog` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(30) NOT NULL DEFAULT '',
  `content` text,
  `summary` varchar(255) NOT NULL DEFAULT '',
  `time` int(10) unsigned NOT NULL DEFAULT '0',
  `click` smallint(6) unsigned NOT NULL DEFAULT '0',
  `cid` int(10) unsigned NOT NULL,
  `del` tinyint(1) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `cid` (`cid`)
) ENGINE=MyISAM AUTO_INCREMENT=66 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Table structure for `hd_blog_attr`
-- ----------------------------
DROP TABLE IF EXISTS `hd_blog_attr`;
CREATE TABLE `hd_blog_attr` (
  `bid` int(10) unsigned NOT NULL,
  `aid` int(10) unsigned NOT NULL,
  KEY `bid` (`bid`),
  KEY `aid` (`aid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
--  Table structure for `hd_cate`
-- ----------------------------
DROP TABLE IF EXISTS `hd_cate`;
CREATE TABLE `hd_cate` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` char(15) NOT NULL DEFAULT '',
  `pid` int(10) unsigned NOT NULL DEFAULT '0',
  `sort` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Table structure for `hd_user`
-- ----------------------------
DROP TABLE IF EXISTS `hd_user`;
CREATE TABLE `hd_user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` char(20) NOT NULL DEFAULT '',
  `password` char(32) NOT NULL DEFAULT '',
  `logintime` int(10) unsigned NOT NULL DEFAULT '0',
  `loginip` char(20) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records 
-- ----------------------------
INSERT INTO `hd_attr` VALUES ('1','置顶','red'), ('2','推荐','green'), ('3','精华','blue');
INSERT INTO `hd_blog` VALUES ('7','bbbccc','<p>bbbccc</p><p><br/></p>','bbbccc','1420559237','116','6','1'), ('8','xxx','<p>xxx</p>','0','1419342909','113','4','1'), ('9','FFF','<p>FFF</p>','0','1419343051','100','5','1'), ('10','linux','<p>&nbsp;&nbsp;&nbsp;&nbsp;linux<br/></p>','0','1419343121','109','6','1'), ('11','SS','<p>SS</p>','0','1419346215','100','2','1'), ('20','FFF','<p>FFF</p>','0','1420557726','101','0','1'), ('19','FFF','<p>FFF</p>','0','1420557698','101','0','1'), ('16','DIV+CSS5','<p>DIV+CSS5</p>','DIV+CSS','1420200326','101','2','1'), ('17','DIV+CSS6','<p>DIV+CSS</p>','DIV+CSS','1420200348','103','2','1'), ('18','DIV+CSS7','<p>DIV+CSS</p>','DIV+CSS','1420200363','100','2','1'), ('21','DIV+CSS5','<p>DIV+CSS5</p>','DIV+CSS','1420557754','103','0','1'), ('22','div+css888','<p>div+css888</p>','div+css888','1420560152','128','2','1'), ('23','有福了！用PHP开发原生桌面应用程序','<p>我们在 &nbsp; &nbsp;<a href=\"http://code.csdn.net/news/2822664\" target=\"_blank\">《【开源弹】HTML5利器大阅兵，助力HTML5开发》</a>中，介绍了几种用HTML5、JavaScript等技术来开发桌面应用的方案，如将NodeJS与WebKit技术融合可以编写跨平台应用的 &nbsp; &nbsp;<a href=\"http://www.csdn.net/article/2014-01-08/2818066-Node-Webkit\" target=\"_blank\">Node-WebKit</a>，腾讯Web团队开发的HTML5桌面应用开发引擎 &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"http://tencentopen.github.io/proj/AlloyDesktop/index.html#overview\" target=\"_blank\">AlloyDesktop</a>等。那你有没有想过用纯PHP、CakePHP等也可以创建运行在OS X、Windows和Linux桌面上的应用？那么解决方案来了！就是这么任性。</p><p style=\"text-align: center;\"><img alt=\"\" style=\"float: none; margin: 0px;\" src=\"http://cms.csdnimg.cn/article/201411/20/546d7c6497b80_middle.jpg?_=18736\"/></p><p style=\"text-align: center;\">图：运行在Ubuntu Linux上的界面<br/></p><p>PHP Nightrain，是使用Python和PHP开发的一个打包工具，通过该工具可以将你的PHP/HTML/CSS/Javascript应用转为原生桌面应用程序，支持对PHP/HTML\r\n &nbsp; &nbsp;Web应用提供图形渲染，提供PHP5预编译功能，可自定义应用宽高等。开发者可以直接下载已经编译好的 &nbsp; &nbsp;<a href=\"http://www.naetech.com/php-nightrain\" target=\"_blank\">PHP Nightrain二进制安装包</a>。</p><p>PHP Nightrain GitHub代码托管地址： &nbsp; &nbsp;<a href=\"https://github.com/naetech/nightrain\" target=\"_blank\">https://github.com/naetech/nightrain</a>。\r\n &nbsp; &nbsp;</p><p><br/></p>','摘要：用Node-WebKit可以开发桌面应用程序，那你有没有想过用纯PHP、CakePHP等也可以创建运行在OS X、Windows和Linux桌面上的应用？那么解决方案来了！就是这么任性。','1420643349','104','4','1'), ('24','HTMLWAWA','<p>HTMLWAWA<br/></p>','HTMLWAWA','1420643536','100','1','1'), ('25','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644083','103','4','0'), ('26','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644204','101','4','0'), ('27','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644350','101','14','0'), ('28','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644351','101','13','0'), ('29','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644354','102','13','0'), ('30','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644355','101','12','0'), ('31','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644357','101','12','0'), ('32','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644359','101','4','0'), ('33','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644361','101','4','0'), ('34','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644362','101','4','0'), ('35','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644365','101','4','0'), ('36','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644571','101','1','0'), ('37','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644573','101','1','0'), ('38','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644574','102','1','0'), ('39','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644575','114','1','0'), ('40','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644575','101','1','0'), ('41','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644577','101','2','0'), ('42','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644578','101','2','0'), ('43','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644579','101','2','0'), ('44','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644580','101','2','0'), ('45','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644581','101','2','0'), ('46','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644782','102','8','0'), ('47','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644785','101','11','0'), ('48','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644787','101','10','0'), ('49','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644788','102','9','0'), ('50','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644790','101','5','0'), ('51','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644791','101','18','0'), ('52','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644792','101','18','0'), ('53','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644793','101','17','0'), ('54','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644795','101','3','0'), ('55','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644797','101','3','0'), ('56','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644944','101','7','0'), ('57','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644947','101','7','0'), ('58','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644947','101','7','0'), ('59','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644948','101','7','0'), ('60','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644949','101','7','0'), ('61','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644950','101','15','0'), ('62','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644951','101','15','0'), ('63','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644952','101','6','0'), ('64','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644952','101','16','0'), ('65','PHP未来的一些可能','<p>德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。他在谈及为何选择PHP时，提到以下几点。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">普遍性：ownCloud的目的是让所有人来托管自己的云服务器。而PHP目前广泛用于Web服务器、操作系统，平台的优势使得用户能轻松地进行部署。</span></p></li><li><p><span style=\"background-color: initial;\">通用性：作为脚本型语言，一个服务器tar文件可以运行于所有的平台而无须复杂的额外编译。</span></p></li><li><p><span style=\"background-color: initial;\">门槛低：大多数程序员对PHP都不陌生，即使是零基础的用户，学习PHP也是相对轻松容易。</span></p></li><li><p><span style=\"background-color: initial;\">轻巧强大：只要使用得当，PHP运行速度快，功能强大。维基百科、Facebook、WordPress等大型Web应用都是用PHP编写的。</span></p></li><li><p><span style=\"background-color: initial;\">资源丰富：PHP拥有庞大的开发生态系统，包括类库、组件、连接器/驱动等。使用它就如同站在了巨人的肩膀上。</span></p></li></ul><p>但纵然PHP有这些亮丽的优点，Frank也指出它有不足之处。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：作为20世纪90年代的产物，它在安全性方面的表现不能令人放心，毕竟那个时候人们的安全意识还是比较天真幼稚的。</span></p></li><li><p><span style=\"background-color: initial;\">编译时间/运行时配置：调用 ./configure脚本来随心所欲地按照自己意愿编译PHP听起来很有趣，</span><span style=\"background-color: initial;\">但如果进行换位思考，我们在维护时要逐字逐句地查看别人的脚本配置那就不见得那么美好了。</span></p></li><li><p><span style=\"background-color: initial;\">矛盾的函数和类命名：一时是下划线，一时是驼峰命名；某些特性可以是过程风格或是面向对象接口风格，甚或兼而有之。</span></p></li><li><p><span style=\"background-color: initial;\">静态类型：PHP在静态类型上可以做得更好。</span></p></li></ul><p>最近Apple新推出的开发语言Swift触动了Frank，语言在更新换代时是需要保持向下兼容还是完全创新？而如果是类似Perl和Python那样无法前后兼容，最终分道扬镳的局面，是大家不想看到的。对此，Frank就PHP的未来提出了自己的想法。</p><ul class=\" list-paddingleft-2\"><li><p><span style=\"background-color: initial;\">安全性：摒弃_Get、_Post、_SERVER，引入一个合适的API来对数据输入进行筛选。</span></p></li><li><p><span style=\"background-color: initial;\">数据库：PHP的数据库支援API真的太丰富了。但某些API已经非常老旧甚至过时了。Frank建议对此进行标准化，最终形成唯一的面向对象接口就可以了。PDO是他做出的第一步尝试。</span></p></li><li><p><span style=\"background-color: initial;\">32位/64位：在32位或64位运行PHP时，人们多少会发现特别是整型数据的运行差别。消除不同类型系统的运行差别是非常必要的。</span></p></li><li><p><span style=\"background-color: initial;\">剔除save_mode、open_basedir等传统概念，使用unicode字符。</span></p></li><li><p><span style=\"background-color: initial;\">移除大部分有关编译和运行时配置的选项：所有下一代PHP的运行时环境应该是尽可能统一和稳定的。</span></p></li><li><p><span style=\"background-color: initial;\">类型：引入可选静态类型的做法必定是非常令人激动的。这样的话一个变量可以定义为布尔或整形。如果错误地使用了变量，会抛出一个异常。</span></p></li></ul><p><strong><span style=\"color: #7f7f7f;\">本文作者Frank Karlitschek系ownCloud发起人，自由软件开发者。</span></strong><br/></p><p><strong><span style=\"color:#000000\">原文链接：<a href=\"http://karlitschek.de/2014/10/a-possible-future-for-php/\" target=\"_blank\">http://karlitschek.de/2014/10/a-possible-future-for-php/</a></span></strong></p><p><br/></p><p><br/></p><p><br/></p>','摘要：德国开放源码软件开发者Frank Karlit-schek主导的ownCloud项目，是目前采用PHP编写的最大型开源项目之一。对于PHP的未来，他提出了自己的想法。','1420644953','101','15','0');
INSERT INTO `hd_blog_attr` VALUES ('7','1'), ('8','1'), ('8','2'), ('9','2'), ('9','3'), ('10','1'), ('10','3'), ('11','1'), ('11','2'), ('11','3'), ('19','2'), ('17','2'), ('17','1'), ('14','2'), ('15','2'), ('17','3'), ('18','1'), ('18','2'), ('18','3'), ('19','3'), ('20','2'), ('20','3'), ('23','1'), ('26','1'), ('26','2'), ('26','3'), ('46','1'), ('47','2'), ('48','1'), ('49','1'), ('49','2'), ('49','3'), ('50','1'), ('50','2'), ('50','3'), ('51','1'), ('52','3'), ('53','1'), ('53','2'), ('54','1'), ('54','2'), ('54','3'), ('60','1'), ('60','2'), ('60','3'), ('61','1'), ('61','2'), ('62','1'), ('62','2'), ('63','1'), ('63','2'), ('63','3'), ('65','1');
INSERT INTO `hd_cate` VALUES ('1','HTML','0','1'), ('2','DIV+CSS','0','2'), ('3','Javascript','0','3'), ('4','PHP','0','4'), ('5','MySQL','0','5'), ('6','Linux','0','6'), ('7','其它','0','7'), ('8','存储引擎','5','100'), ('9','事务','5','100'), ('10','视图','5','100'), ('11','存储过程','5','100'), ('12','字符串','4','100'), ('13','数组','4','100'), ('14','对象','4','100'), ('15','基本命令','6','100'), ('16','网络配置','6','100'), ('17','JQuery','3','100'), ('18','AJAX','3','100');
INSERT INTO `hd_user` VALUES ('1','admin','21232f297a57a5a743894a0e4a801fc3','1420643262','119.141.141.96');
